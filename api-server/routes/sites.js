// Express Router for managing sites

import { Router } from 'express';
import { Site } from '../mongo/schemas/site.js';
import { nanoid } from 'nanoid';
import { logger } from '../index.js';

import { Device } from '../mongo/schemas/device.js';

const router = Router();

// Get all sites
router.get('/', async (req, res) => {
  const sites = await Site.find();
  res.json(sites);
});

// Get a specific site
router.get('/:id', async (req, res) => {
  const site = await Site.findOne({ id: req.params.id });
  if (!site) {
    res.status(404).json({
      error: 'Not Found',
      message: `Site not found`,
    })
    return;
  }
  
  res.json(site);
});

// Create a new site
router.post('/', async (req, res) => {
  // Verify required elements are present, except ID which is generated by nanoid.
  if (!req.body.name || !req.body.tenant_name) {
    res.status(400).json({
      error: 'Bad Request',
      message: 'The request body must contain a name and tenant_name property',
    })
    return;
  }

  // Generate a new ID
  req.body.id = nanoid(4);
  
  // Create the new site
  const site = new Site(req.body);
  await site.save();

  logger.info(`Created new site ${site.id} (${site.name}) for tenant ${site.tenant_name}`)

  res.json(site);
});

// Publish a site
router.post('/:id/publish', async (req, res) => {
  const site = await Site.findOne({ id: req.params.id });
  if (!site) {
    res.status(404).json({
      error: 'Not Found',
      message: `Site not found`,
    })
    return;
  }

  if (site.published) {
    res.status(400).json({
      error: 'site_already_published',
      message: `Site is already published`,
    })
    return;
  }

  site.published = true;
  await site.save();

  res.json({
    status: "site_published",
    message: "Site has been published successfully."
  })

  logger.info(`Published site ${site.id} (${site.name}) for tenant ${site.tenant_name}`)
});

// Unpublish a site
router.delete('/:id/publish', async (req, res) => {
  const site = await Site.findOne({ id: req.params.id });
  if (!site) {
    res.status(404).json({
      error: 'Not Found',
      message: `Site not found`,
    })
    return;
  }

  if (!site.published) {
    res.status(400).json({
      error: 'site_not_published',
      message: `Site is not published`,
    })
    return;
  }

  site.published = false;
  await site.save();

  res.json({
    status: "site_unpublished",
    message: "Site has been unpublished successfully."
  })

  logger.info(`Unpublished site ${site.id} (${site.name}) for tenant ${site.tenant_name}`)
});

// Rename site or change tenant
router.patch('/:id', async (req, res) => {
  const site = await Site.findOne({ id: req.params.id });
  if (!site) {
    res.status(404).json({
      error: 'Not Found',
      message: `Site not found`,
    })
    return;
  }

  if (req.body.name) {
    site.name = req.body.name;
  }

  if (req.body.tenant_name) {
    site.tenant_name = req.body.tenant_name;
  }

  await site.save();
  res.json(site);

  logger.info(`Renamed site ${site.id} (${site.name}) for tenant ${site.tenant_name}`)
});

// Delete a site
router.delete('/:id', async (req, res) => {
  const site = await Site.findOne({ id: req.params.id });
  if (!site) {
    res.status(404).json({
      error: 'Not Found',
      message: `Site not found`,
    })
    return;
  }

  // Check for devices
  const devices = await Device.find({ site_id: req.params.id });
  if (devices.length > 0) {
    res.status(400).json({
      error: 'site_not_empty',
      message: `Site is not empty`,
    })
    return;
  }

  await Site.deleteOne({ id: req.params.id })

  res.json({
    status: "site_deleted",
    message: "Site has been deleted successfully."
  })

  logger.info(`Deleted site ${site.id} (${site.name}) for tenant ${site.tenant_name}`)
});

export default router;