// yealink-provision - Models API Endpoints
// Cameron Fleming 2023

// These endpoints are used to manage Yealink Device Models within yealink-provision.

import { customAlphabet } from 'nanoid';
import { Router } from 'express';

import { Model } from '../mongo/schemas/model.js';

import { logger } from '../index.js';

// Setup nanoid
const nanoid = customAlphabet('1234567890abcdef', 8);

const router = Router({ mergeParams: true });

// Get all models
router.get('/', async (req, res) => {
  const models = await Model.find();
  res.json(models);
});

// Get a specific model
router.get('/:id', async (req, res) => {
  const model = await Model.findOne({ id: req.params.id });
  if (!model) {
    res.status(404).json({
      error: 'Not Found',
      message: `Model not found`,
    })
    return;
  }

  res.json(model);
})

// Create a new model
router.post('/', async (req, res) => {
  // Verify required elements are present, except ID which is generated by nanoid.
  if (!req.body.name) {
    res.status(400).json({
      error: 'Bad Request',
      message: 'The request body must contain a name',
    })
    return;
  }
  
  // Generate a new ID
  req.body.id = nanoid(8);

  // Create the new model
  const model = new Model(req.body);
  await model.save();
  res.json(model);

  logger.info(`Created new phone model, ID: ${req.body.id}, name: ${req.body.name}`);
});

// Rename a model
router.patch('/:id', async (req, res) => {
  const model = await Model.findOne({ id: req.params.id });
  if (!model) {
    res.status(404).json({
      error: 'Not Found',
      message: `Model not found`,
    })
    return;
  }

  // Verify required elements are present
  if (!req.body.name) {
    res.status(400).json({
      error: 'Bad Request',
      message: 'The request body must contain a name property',
    })
    return;
  }

  // Update the model
  model.name = req.body.name;
  await model.save();
  res.json(model);

  logger.info(`Renamed phone model, ID: ${req.body.id}, new name: ${req.body.name}`);
});

// Delete a model
router.delete('/:id', async (req, res) => {
  const model = await Model.findOne({ id: req.params.id });
  if (!model) {
    res.status(404).json({
      error: 'Not Found',
      message: `Model not found`,
    })
    return;
  }

  await Model.deleteOne({ id: model.id });
  res.json({  
    status: 'model_deleted',
    message: `Model has been deleted`
  });

  logger.info(`Deleted phone model, ID: ${req.body.id}, name: ${req.body.name}`);
});

export default router;